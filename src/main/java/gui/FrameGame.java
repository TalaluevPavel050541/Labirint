package gui;

import gamemap.facades.GameFacade;
import gameobjects.abstracts.AbstractGameObject;
import enums.ActionResult;
import enums.GameObjectType;
import enums.MovingDirection;
import listeners.interfaces.CloseFrameListener;
import listeners.interfaces.MoveResultListener;
import utils.MessageManager;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
//еще один класс, который является подписчиком для паттерна Наблюдатель и реализует интерфейс слушателя
// класс, отвечающий за вывод сообщений на экран, нажатие кнопок, за отображение компонентов и за слушание событий
public class FrameGame extends BaseChildFrame implements ActionListener, MoveResultListener {

    private static final String MESSAGE_SAVE = "Сохранить игру перед выходом?";
    private static final String MESSAGE_SAVED_SUCCESS = "Игра сохранена!";
    private static final String MESSAGE_DIE = "Вы проиграли!";
    private static final String MESSAGE_WIN = "Вы выиграли! Количество очков:";
    private FrameStat frameStat;
    private GameFacade gameFacade;

    /**
     * Creates new form FrameGame
     */
    public FrameGame(GameFacade resultFacade) { //реализация паттерна Фасад
        this.gameFacade = resultFacade;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanelMap = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbtnLeft = new javax.swing.JButton();
        jbtnUp = new javax.swing.JButton();
        jbtnRight = new javax.swing.JButton();
        jbtnDown = new javax.swing.JButton();
        jlabelScoreText = new javax.swing.JLabel();
        jlabelTurnsLeftText = new javax.swing.JLabel();
        jbtnSave = new javax.swing.JButton();
        jbtnExit = new javax.swing.JButton();
        jlabelScore = new javax.swing.JLabel();
        jlabelTurnsLeft = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmenuFile = new javax.swing.JMenu();
        jmenuSave = new javax.swing.JMenuItem();
        jmenuExit = new javax.swing.JMenuItem();
        jmenuService = new javax.swing.JMenu();
        jmenuStat = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("FrameGame"); // NOI18N

        jPanelMap.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelMap.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbtnLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left.png"))); // NOI18N
        jbtnLeft.setName("jbtnLeft"); // NOI18N
        jbtnLeft.addActionListener(this);

        jbtnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/up.png"))); // NOI18N
        jbtnUp.setName("jbtnUp"); // NOI18N
        jbtnUp.addActionListener(this);

        jbtnRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/right.png"))); // NOI18N
        jbtnRight.setName("jbtnRight"); // NOI18N
        jbtnRight.addActionListener(this);

        jbtnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/down.png"))); // NOI18N
        jbtnDown.setName("jbtnDown"); // NOI18N
        jbtnDown.addActionListener(this);

        jlabelScoreText.setText("Количество очков:");
        jlabelScoreText.setName("jlabelScoreText"); // NOI18N

        jlabelTurnsLeftText.setText("Осталось ходов:");
        jlabelTurnsLeftText.setToolTipText("");
        jlabelTurnsLeftText.setName("jlabelTurnsLeftText"); // NOI18N

        jbtnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jbtnSave.setText("Сохранить");
        jbtnSave.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jbtnSave.setName("jbtnUp"); // NOI18N
        jbtnSave.addActionListener(this);

        jbtnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        jbtnExit.setText("Выйти из игры");
        jbtnExit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jbtnExit.setName("jbtnUp"); // NOI18N
        jbtnExit.addActionListener(this);

        jlabelScore.setText("0");
        jlabelScore.setName("jlabelScore"); // NOI18N

        jlabelTurnsLeft.setText("0");
        jlabelTurnsLeft.setToolTipText("");
        jlabelTurnsLeft.setName("jlabelTurnsLeft"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlabelScoreText)
                                        .addComponent(jlabelTurnsLeftText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlabelScore, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jlabelTurnsLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jbtnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jbtnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jbtnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(46, 46, 46)
                                                .addComponent(jbtnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jbtnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbtnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jbtnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jbtnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jbtnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jlabelScoreText)
                                        .addComponent(jlabelScore))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jlabelTurnsLeftText, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jlabelTurnsLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanelMap, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanelMap, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jmenuFile.setText("Файл");
        jmenuFile.setName("jmenuFile"); // NOI18N

        jmenuSave.setText("Сохранить игру");
        jmenuSave.addActionListener(this);
        jmenuFile.add(jmenuSave);

        jmenuExit.setText("Выйти из игры");
        jmenuExit.setActionCommand("Выйти");
        jmenuExit.addActionListener(this);
        jmenuFile.add(jmenuExit);

        jMenuBar1.add(jmenuFile);

        jmenuService.setText("Сервис");

        jmenuStat.setText("Статистика");
        jmenuStat.addActionListener(this);
        jmenuService.add(jmenuStat);

        jMenuBar1.add(jmenuService);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        setSize(new java.awt.Dimension(534, 397));
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == jbtnLeft) {
            FrameGame.this.jbtnLeftActionPerformed(evt); // кнопка влево
        }
        else if (evt.getSource() == jbtnUp) {
            FrameGame.this.jbtnUpActionPerformed(evt); //кнопка вверх
        }
        else if (evt.getSource() == jbtnRight) {
            FrameGame.this.jbtnRightActionPerformed(evt); //кнопка вправо
        }
        else if (evt.getSource() == jbtnDown) {
            FrameGame.this.jbtnDownActionPerformed(evt); //кнопка вниз
        }
        else if (evt.getSource() == jbtnSave) {
            FrameGame.this.jbtnSaveActionPerformed(evt); //кнопка сохранить
        }
        else if (evt.getSource() == jbtnExit) {
            FrameGame.this.jbtnExitActionPerformed(evt);//кнопка закрыть
        }
        else if (evt.getSource() == jmenuExit) { //кнопка закрыть из меню - вкладка Файл
            FrameGame.this.jmenuExitActionPerformed(evt);
        }
        else if (evt.getSource() == jmenuStat) { //кнопка статистика из меню - вкладка Сервис
            FrameGame.this.jmenuStatActionPerformed(evt);
        }
        else if (evt.getSource() == jmenuSave) { //кнопка сохранить из меню - вкладка Файл
            FrameGame.this.jmenuSaveActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    //книпока вверх
    private void jbtnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpActionPerformed
        gameFacade.moveObject(MovingDirection.UP, GameObjectType.GOLDMAN);// реализация движения для персонажа по направлению
    }//GEN-LAST:event_jbtnUpActionPerformed

    //кнопка влево
    private void jbtnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLeftActionPerformed
        gameFacade.moveObject(MovingDirection.LEFT, GameObjectType.GOLDMAN); // реализация движения для персонажа по направлению
    }//GEN-LAST:event_jbtnLeftActionPerformed
//кнопка вниз
    private void jbtnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDownActionPerformed
        gameFacade.moveObject(MovingDirection.DOWN, GameObjectType.GOLDMAN); // реализация движения для персонажа по направлению
    }//GEN-LAST:event_jbtnDownActionPerformed
//кнопка вправо
    private void jbtnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRightActionPerformed
        gameFacade.moveObject(MovingDirection.RIGHT, GameObjectType.GOLDMAN); // реализация движения для персонажа по направлению
    }//GEN-LAST:event_jbtnRightActionPerformed
// кнопка сохранить
    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        saveMap(); // сохранение карты
    }//GEN-LAST:event_jbtnSaveActionPerformed
//кнопка выхода
    private void jbtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExitActionPerformed
        if (allowExit()) { // проверка на разрешение закрытия
            closeFrame();
        }
    }//GEN-LAST:event_jbtnExitActionPerformed
// кнопка начала игры из меню
    private void jmenuStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuStatActionPerformed
        gameFacade.stopGame(); // остановка игры
        if (frameStat == null) {
            frameStat = new FrameStat(new CloseFrameListener() {
                @Override
                public void onCloseAction() {
                    gameFacade.startGame(); // запуск игры
                }
            });

        }

        frameStat.setList(gameFacade.getScoreSaver().getScoreList()); //запись полученных очков
        frameStat.showFrame(this); // показ формы

    }//GEN-LAST:event_jmenuStatActionPerformed

    //кнопка закрыть из меню - из вкладки Файл
    private void jmenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuExitActionPerformed
        if (allowExit()) { // проверка на разрешение закрытия
            closeFrame(); // закрытие формы
        }
    }//GEN-LAST:event_jmenuExitActionPerformed

    //кнопка сохранить из меню - из вкладки Файл
    private void jmenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuSaveActionPerformed
        saveMap();
    }//GEN-LAST:event_jmenuSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelMap;
    private javax.swing.JButton jbtnDown;
    private javax.swing.JButton jbtnExit;
    private javax.swing.JButton jbtnLeft;
    private javax.swing.JButton jbtnRight;
    private javax.swing.JButton jbtnSave;
    private javax.swing.JButton jbtnUp;
    private javax.swing.JLabel jlabelScore;
    private javax.swing.JLabel jlabelScoreText;
    private javax.swing.JLabel jlabelTurnsLeft;
    private javax.swing.JLabel jlabelTurnsLeftText;
    private javax.swing.JMenuItem jmenuExit;
    private javax.swing.JMenu jmenuFile;
    private javax.swing.JMenuItem jmenuSave;
    private javax.swing.JMenu jmenuService;
    private javax.swing.JMenuItem jmenuStat;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void showFrame(JFrame parent) {
        initMap();//инициализация карты
        super.showFrame(parent); //показ окна
    }

    private void initMap() {//инициализация карты
        gameFacade.addMoveListener(this); //добавление слушателя - то есть является слушателем

        jPanelMap.removeAll();//удаление всех компонентов
        jPanelMap.add(gameFacade.getMap()); // добавление карты в форму

        jlabelTurnsLeft.setText(String.valueOf(gameFacade.getTurnsLeftCount())); //запись остатка шагов в текст
        jlabelScore.setText(String.valueOf(gameFacade.getTotalScore()));//запись общего количества очков в текст

        gameFacade.startGame(); //запуск игры
    }

    @Override //реализация наблюдателя - реагирование на событие
    public void notifyActionResult(ActionResult actionResult, AbstractGameObject movingObject, AbstractGameObject targetObject) {

        if (movingObject.getType().equals(GameObjectType.GOLDMAN)) { //для персонажа
            checkGoldManActions(actionResult); // выбор действия в зависимости от события
        }

        checkCommonActions(actionResult); // действие в случае смерти персонажа
        gameFacade.updateObjects(movingObject, targetObject); //обновление объектов в коллекции

    }

    private void checkGoldManActions(ActionResult actionResult) {
        switch (actionResult) { // действия на форме в зависимости от событий на карте игры
            case MOVE: { // движение

                jlabelTurnsLeft.setText(String.valueOf(gameFacade.getTurnsLeftCount())); //запись остатка шагов персонажа

                if (gameFacade.getTurnsLeftCount() == 0) { //если лимит шагов исчерпан, то
                    closeFrame(MESSAGE_DIE); //закрытие формы
                }

                break;
            }

            case WIN: { // выиграл
                closeFrame(MESSAGE_WIN + gameFacade.getTotalScore()); // вывод сообщения и получение общего коли-ва очков
                gameFacade.saveScore(); //сохранение очков
            }


            case COLLECT_TREASURE: { //сбор сокровища
                jlabelScore.setText(String.valueOf(gameFacade.getTotalScore())); // запись текста - получение общего количества очков
                jlabelTurnsLeft.setText(String.valueOf(gameFacade.getTurnsLeftCount())); // запись остатка шагов персонажа
                break;
            }

            case HIDE_IN_TREE:{ //прячется за деревом
                jlabelTurnsLeft.setText(String.valueOf(gameFacade.getTurnsLeftCount())); // запись остатка шагов персонажа
            }

        }

    }

    private void checkCommonActions(ActionResult actionResult) { //в случае смерти персонажа - закрытие формы
        switch (actionResult) {

            case DIE: {
                closeFrame(MESSAGE_DIE); // закрытие формы при получении события Умер
                break;
            }
        }

    }

    protected boolean acceptCloseAction() {
        return allowExit();
    } //решение о закрытии формы


    @Override
    protected void setCloseOperation() {
        super.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);// Операция закрытия окна по умолчанию "ничего не делать".

        super.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {

                if (acceptCloseAction()) { // true
                    closeFrame(); // закрываем фрейм
                }
            }
        });

    }


    @Override
    protected void closeFrame() { // закрытие формы
        gameFacade.stopGame(); // остановка игры
        super.closeFrame(); //закрытие формы
    }

    private void closeFrame(final String message) { //закрытие формы с выводом сообщения
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                MessageManager.showInformMessage(null, message);
            }
        }); // вывод сообщения на экран
        closeFrame(); //закрытие формы
    }

    private boolean allowExit() { // разрешение о закрытии формы
        gameFacade.stopGame(); // остановка игры, чтобы монстр не мог двигаться перед выводом диалогового окна

        int result = MessageManager.showYesNoCancelMessage(this, MESSAGE_SAVE); //вывод сообщения Сохранить игру перед выходом
        switch (result) {
            case JOptionPane.YES_OPTION: { //да
                gameFacade.saveMap(); //сохранение карты
                MessageManager.showInformMessage(this, MESSAGE_SAVED_SUCCESS); //вывод сообщения
                break;
            }
            case JOptionPane.NO_OPTION: { //нет
                closeFrame(); //закрытие формы
                break;
            }
            case JOptionPane.CANCEL_OPTION: { //закрыть
                gameFacade.startGame(); // запуск игры
                return false;
            }

        }

        return true; //возврат true
    }

    private void saveMap() { //метод сохранения карты
        gameFacade.saveMap(); // сохранение карты
        closeFrame(MESSAGE_SAVED_SUCCESS); // вывод сообщения об успешном сохранении
    }
}